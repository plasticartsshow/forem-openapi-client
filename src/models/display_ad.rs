/*
 * Forem API V1
 *
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// DisplayAd : A Display Ad, aka Billboard, aka Widget



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DisplayAd {
    /// The ID of the Display Ad
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// For internal use, helps distinguish ads from one another
    #[serde(rename = "name")]
    pub name: String,
    /// The text (in markdown) of the ad (required)
    #[serde(rename = "body_markdown")]
    pub body_markdown: String,
    /// Ad must be both published and approved to be in rotation
    #[serde(rename = "approved", skip_serializing_if = "Option::is_none")]
    pub approved: Option<bool>,
    /// Ad must be both published and approved to be in rotation
    #[serde(rename = "published", skip_serializing_if = "Option::is_none")]
    pub published: Option<bool>,
    /// Identifies the organization to which the ad belongs
    #[serde(rename = "organization_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub organization_id: Option<Option<i32>>,
    /// Identifies the user who created the ad.
    #[serde(rename = "creator_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub creator_id: Option<Option<i32>>,
    /// Identifies which area of site layout the ad can appear in
    #[serde(rename = "placement_area")]
    pub placement_area: PlacementArea,
    /// Tags on which this ad can be displayed (blank is all/any tags)
    #[serde(rename = "tag_list", skip_serializing_if = "Option::is_none")]
    pub tag_list: Option<String>,
    /// Articles this ad should *not* appear on (blank means no articles are disallowed, and this ad can appear next to any/all articles). Comma-separated list of integer Article IDs
    #[serde(rename = "article_exclude_ids", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub article_exclude_ids: Option<Option<String>>,
    /// Potentially limits visitors to whom the ad is visible
    #[serde(rename = "display_to", skip_serializing_if = "Option::is_none")]
    pub display_to: Option<DisplayTo>,
    /// Types of the billboards: in_house (created by admins), community (created by an entity, appears on entity's content), external ( created by an entity, or a non-entity, can appear everywhere) 
    #[serde(rename = "type_of", skip_serializing_if = "Option::is_none")]
    pub type_of: Option<TypeOf>,
}

impl DisplayAd {
    /// A Display Ad, aka Billboard, aka Widget
    pub fn new(name: String, body_markdown: String, placement_area: PlacementArea) -> DisplayAd {
        DisplayAd {
            id: None,
            name,
            body_markdown,
            approved: None,
            published: None,
            organization_id: None,
            creator_id: None,
            placement_area,
            tag_list: None,
            article_exclude_ids: None,
            display_to: None,
            type_of: None,
        }
    }
}

/// Identifies which area of site layout the ad can appear in
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PlacementArea {
    #[serde(rename = "sidebar_left")]
    SidebarLeft,
    #[serde(rename = "sidebar_left_2")]
    SidebarLeft2,
    #[serde(rename = "sidebar_right")]
    SidebarRight,
    #[serde(rename = "post_sidebar")]
    PostSidebar,
    #[serde(rename = "post_comments")]
    PostComments,
}

impl Default for PlacementArea {
    fn default() -> PlacementArea {
        Self::SidebarLeft
    }
}
/// Potentially limits visitors to whom the ad is visible
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DisplayTo {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "logged_in")]
    LoggedIn,
    #[serde(rename = "logged_out")]
    LoggedOut,
}

impl Default for DisplayTo {
    fn default() -> DisplayTo {
        Self::All
    }
}
/// Types of the billboards: in_house (created by admins), community (created by an entity, appears on entity's content), external ( created by an entity, or a non-entity, can appear everywhere) 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeOf {
    #[serde(rename = "in_house")]
    InHouse,
    #[serde(rename = "community")]
    Community,
    #[serde(rename = "external")]
    External,
}

impl Default for TypeOf {
    fn default() -> TypeOf {
        Self::InHouse
    }
}

